{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yming\\\\Downloads\\\\react-chartjs-2-master\\\\react-chartjs-2-master\\\\src\\\\SegmentChartGrandient.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst scores = [6, 5, 5, 5, 3, 4, 6, 4, 5];\nconst labels = [100, 200, 300, 400, 500, 600, 700];\nconst options = {\n  fill: true,\n  responsive: true,\n  scales: {\n    y: {\n      min: 0\n    }\n  },\n  plugins: {\n    legend: {\n      display: true\n    }\n  }\n};\nexport default function SegmentChartGrandient() {\n  _s();\n\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  useEffect(function () {\n    const chart = chartRef.current;\n\n    if (!chart) {\n      return;\n    }\n\n    function createGradientColor(color) {\n      const ctx = chart.ctx;\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(0.99, \"rgba(255,255,255,0.6)\");\n      gradient.addColorStop(1, \"rgba(255,255,255,0.6)\");\n      return gradient;\n    }\n\n    setChartData({\n      datasets: [{\n        label: \"Mis datos (Gradient)\",\n        data: scores,\n        tension: 0.3,\n        borderColor: \"rgb(75, 192, 192)\",\n        pointRadius: 6,\n        pointBackgroundColor: \"rgb(75, 192, 192)\",\n        backgroundColor: \"rgba(75, 192, 192, 0.3)\",\n        segment: {\n          borderColor: function (context) {\n            if (context.type === \"segment\") {\n              return context.p1DataIndex % 2 === 0 ? \"red\" : \"green\";\n            }\n          },\n          backgroundColor: function (context) {\n            if (context.type === \"segment\") {\n              return createGradientColor(context.p1DataIndex % 2 === 0 ? \"red\" : \"green\");\n            }\n          }\n        }\n      }],\n      labels\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: options,\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SegmentChartGrandient, \"hzgh4HIuObPwytHlsQmHhMeeGTc=\");\n\n_c = SegmentChartGrandient;\n\nvar _c;\n\n$RefreshReg$(_c, \"SegmentChartGrandient\");","map":{"version":3,"sources":["C:/Users/yming/Downloads/react-chartjs-2-master/react-chartjs-2-master/src/SegmentChartGrandient.js"],"names":["useEffect","useRef","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","Line","register","scores","labels","options","fill","responsive","scales","y","min","plugins","legend","display","SegmentChartGrandient","chartRef","chartData","setChartData","datasets","chart","current","createGradientColor","color","ctx","gradient","createLinearGradient","addColorStop","label","data","tension","borderColor","pointRadius","pointBackgroundColor","backgroundColor","segment","context","type","p1DataIndex"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst scores = [6, 5, 5, 5, 3, 4, 6, 4, 5];\nconst labels = [100, 200, 300, 400, 500, 600, 700];\n\nconst options = {\n  fill: true,\n  responsive: true,\n  scales: {\n    y: {\n      min: 0,\n    },\n  },\n  plugins: {\n    legend: {\n      display: true,\n    },\n  },\n};\n\nexport default function SegmentChartGrandient() {\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    datasets: [],\n  });\n\n  useEffect(function () {\n    const chart = chartRef.current;\n    if (!chart) {\n      return;\n    }\n\n    function createGradientColor(color) {\n      const ctx = chart.ctx;\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(0.99, \"rgba(255,255,255,0.6)\");\n      gradient.addColorStop(1, \"rgba(255,255,255,0.6)\");\n      return gradient;\n    }\n\n    setChartData({\n      datasets: [\n        {\n          label: \"Mis datos (Gradient)\",\n          data: scores,\n          tension: 0.3,\n          borderColor: \"rgb(75, 192, 192)\",\n          pointRadius: 6,\n          pointBackgroundColor: \"rgb(75, 192, 192)\",\n          backgroundColor: \"rgba(75, 192, 192, 0.3)\",\n          segment: {\n            borderColor: function (context) {\n              if (context.type === \"segment\") {\n                return context.p1DataIndex % 2 === 0 ? \"red\" : \"green\";\n              }\n            },\n            backgroundColor: function (context) {\n              if (context.type === \"segment\") {\n                return createGradientColor(\n                  context.p1DataIndex % 2 === 0 ? \"red\" : \"green\"\n                );\n              }\n            },\n          },\n        },\n      ],\n      labels,\n    });\n  }, []);\n\n  return <Line data={chartData} options={options} ref={chartRef} />;\n}\n"]},"metadata":{},"sourceType":"module"}